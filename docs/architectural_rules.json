{
  "architectural_rules": {
    "version": "1.0.0",
    "description": "Строго формализованные архитектурные правила для e-commerce системы",
    "categories": {
      "layered_architecture": {
        "description": "Правила слойной архитектуры",
        "rules": [
          {
            "id": "LA-001",
            "name": "Dependency Inversion",
            "priority": "CRITICAL",
            "description": "Высокоуровневые модули не должны зависеть от низкоуровневых. Оба должны зависеть от абстракций",
            "implementation": "Используйте интерфейсы/контракты для всех внешних зависимостей",
            "violation_consequences": "Тесная связанность, сложность тестирования, невозможность замены компонентов"
          },
          {
            "id": "LA-002",
            "name": "Single Responsibility",
            "priority": "HIGH",
            "description": "Каждый модуль/класс должен иметь только одну причину для изменения",
            "implementation": "Разделяйте бизнес-логику, валидацию, персистентность, представление",
            "violation_consequences": "Хрупкий код, сложность поддержки, конфликты при изменениях"
          },
          {
            "id": "LA-003",
            "name": "Open/Closed Principle",
            "priority": "HIGH",
            "description": "Модули должны быть открыты для расширения, но закрыты для модификации",
            "implementation": "Используйте стратегии, декораторы, плагины для добавления функциональности",
            "violation_consequences": "Регрессии при добавлении новых фич, нарушение существующего функционала"
          },
          {
            "id": "LA-004",
            "name": "Data Access Layer (Service Layer)",
            "priority": "CRITICAL",
            "description": "Компоненты и бизнес-логика не должны напрямую взаимодействовать с источниками данных (БД, внешние API). Весь доступ к данным должен осуществляться через специальный сервисный слой.",
            "implementation": "Создавайте сервисные модули (например, `products.service.ts`) для инкапсуляции всей логики запросов к данным (CRUD-операции). Компоненты вызывают функции из этих сервисов, не зная деталей реализации хранилища.",
            "violation_consequences": "Сильная связанность компонентов с источником данных, сложность замены БД, дублирование кода запросов, трудности при тестировании и логировании."
          }
        ]
      },
      "data_management": {
        "description": "Правила управления данными",
        "rules": [
          {
            "id": "DM-001",
            "name": "Single Source of Truth",
            "priority": "CRITICAL",
            "description": "Каждый элемент данных должен иметь единственное авторитетное представление",
            "implementation": "Централизованное хранение в БД, кэширование производных данных",
            "violation_consequences": "Несогласованность данных, конфликты, потеря актуальности"
          },
          {
            "id": "DM-002",
            "name": "ACID Transactions",
            "priority": "CRITICAL",
            "description": "Критически важные операции должны выполняться в транзакциях",
            "implementation": "Оформление заказа, списание средств, обновление инвентаря в одной транзакции",
            "violation_consequences": "Потеря данных, неконсистентное состояние системы"
          },
          {
            "id": "DM-003",
            "name": "Event Sourcing for Audit Trail",
            "priority": "MEDIUM",
            "description": "Критичные изменения данных должны сохраняться как события",
            "implementation": "Логирование всех изменений заказов, платежей, инвентаря",
            "violation_consequences": "Невозможность аудита, отсутствие истории изменений"
          },
          {
            "id": "DM-004",
            "name": "Data Encryption",
            "priority": "CRITICAL",
            "description": "Конфиденциальные данные должны быть зашифрованы в покое и в транзите",
            "implementation": "Шифрование PII, платежных данных, паролей (bcrypt/argon2)",
            "violation_consequences": "Нарушение безопасности, утечки персональных данных"
          }
        ]
      },
      "api_design": {
        "description": "Правила проектирования API",
        "rules": [
          {
            "id": "API-001",
            "name": "RESTful Design",
            "priority": "HIGH",
            "description": "API должно следовать принципам REST",
            "implementation": "Используйте HTTP методы по назначению, статусные коды, ресурсно-ориентированные URL",
            "violation_consequences": "Непредсказуемое поведение API, сложность интеграции"
          },
          {
            "id": "API-002",
            "name": "API Versioning",
            "priority": "HIGH",
            "description": "API должно поддерживать версионирование для обратной совместимости",
            "implementation": "Версии в URL (/api/v1/) или заголовках, поддержка минимум N-1 версий",
            "violation_consequences": "Поломка клиентских приложений при обновлениях"
          },
          {
            "id": "API-003",
            "name": "Rate Limiting",
            "priority": "HIGH",
            "description": "API должно иметь ограничения по частоте запросов",
            "implementation": "Лимиты по пользователю/IP, разные лимиты для разных операций",
            "violation_consequences": "DDoS атаки, перегрузка системы, деградация производительности"
          },
          {
            "id": "API-004",
            "name": "Input Validation",
            "priority": "CRITICAL",
            "description": "Все входные данные должны валидироваться на уровне API",
            "implementation": "Схемы валидации (JSON Schema, OpenAPI), санитизация данных",
            "violation_consequences": "Инъекции, XSS, повреждение данных"
          },
          {
            "id": "API-005",
            "name": "Idempotency",
            "priority": "HIGH",
            "description": "Небезопасные операции должны быть идемпотентными",
            "implementation": "Идентификаторы запросов для POST/PUT операций",
            "violation_consequences": "Дублирование заказов, двойные списания"
          }
        ]
      },
      "security": {
        "description": "Правила безопасности",
        "rules": [
          {
            "id": "SEC-001",
            "name": "Authentication Required",
            "priority": "CRITICAL",
            "description": "Все защищенные ресурсы требуют аутентификации",
            "implementation": "JWT токены, OAuth2, многофакторная аутентификация для админов",
            "violation_consequences": "Несанкционированный доступ к данным и функциональности"
          },
          {
            "id": "SEC-002",
            "name": "Role-Based Access Control",
            "priority": "CRITICAL",
            "description": "Доступ к ресурсам должен контролироваться ролевой моделью",
            "implementation": "Роли: guest, customer, admin, super_admin с четко определенными правами",
            "violation_consequences": "Привилегированный доступ неавторизованных пользователей"
          },
          {
            "id": "SEC-003",
            "name": "HTTPS Enforcement",
            "priority": "CRITICAL",
            "description": "Вся коммуникация должна происходить по HTTPS",
            "implementation": "SSL/TLS сертификаты, HTTP to HTTPS редирект, HSTS заголовки",
            "violation_consequences": "Перехват данных, man-in-the-middle атаки"
          },
          {
            "id": "SEC-004",
            "name": "OWASP Top 10 Compliance",
            "priority": "CRITICAL",
            "description": "Система должна быть защищена от OWASP Top 10 уязвимостей",
            "implementation": "Регулярные security аудиты, автоматизированное сканирование",
            "violation_consequences": "Критические уязвимости безопасности"
          }
        ]
      },
      "performance": {
        "description": "Правила производительности",
        "rules": [
          {
            "id": "PERF-001",
            "name": "Caching Strategy",
            "priority": "HIGH",
            "description": "Часто используемые данные должны кэшироваться",
            "implementation": "Redis для сессий, CDN для статики, кэш запросов к БД",
            "violation_consequences": "Медленные отклики, высокая нагрузка на БД"
          },
          {
            "id": "PERF-002",
            "name": "Database Optimization",
            "priority": "HIGH",
            "description": "База данных должна быть оптимизирована для производительности",
            "implementation": "Индексы на часто используемых полях, оптимизация запросов, connection pooling",
            "violation_consequences": "Медленные запросы, таймауты, деградация UX"
          },
          {
            "id": "PERF-003",
            "name": "Asynchronous Processing",
            "priority": "MEDIUM",
            "description": "Длительные операции должны выполняться асинхронно",
            "implementation": "Очереди сообщений для email рассылки, обработки платежей, генерации отчетов",
            "violation_consequences": "Блокирование UI, таймауты запросов"
          },
          {
            "id": "PERF-004",
            "name": "Pagination",
            "priority": "HIGH",
            "description": "Списки данных должны поддерживать пагинацию",
            "implementation": "Cursor-based или offset-based пагинация для товаров, заказов",
            "violation_consequences": "Медленная загрузка страниц, высокое потребление памяти"
          }
        ]
      },
      "monitoring": {
        "description": "Правила мониторинга и наблюдаемости",
        "rules": [
          {
            "id": "MON-001",
            "name": "Structured Logging",
            "priority": "HIGH",
            "description": "Логи должны быть структурированными и машиночитаемыми",
            "implementation": "JSON формат логов, уровни важности, контекстная информация",
            "violation_consequences": "Сложность диагностики проблем, медленный troubleshooting"
          },
          {
            "id": "MON-002",
            "name": "Health Checks",
            "priority": "HIGH",
            "description": "Все сервисы должны предоставлять health check endpoints",
            "implementation": "/health, /readiness endpoints с проверкой зависимостей",
            "violation_consequences": "Невозможность автоматического мониторинга доступности"
          },
          {
            "id": "MON-003",
            "name": "Metrics Collection",
            "priority": "MEDIUM",
            "description": "Ключевые метрики должны собираться и отслеживаться",
            "implementation": "Prometheus/Grafana для метрик производительности, бизнес-метрик",
            "violation_consequences": "Невозможность проактивного выявления проблем"
          },
          {
            "id": "MON-004",
            "name": "Error Tracking",
            "priority": "HIGH",
            "description": "Ошибки должны отслеживаться и агрегироваться",
            "implementation": "Sentry/Bugsnag для отслеживания исключений, alerting",
            "violation_consequences": "Незаметные ошибки в продакшене, деградация UX"
          }
        ]
      },
      "scalability": {
        "description": "Правила масштабируемости",
        "rules": [
          {
            "id": "SCALE-001",
            "name": "Stateless Services",
            "priority": "HIGH",
            "description": "Сервисы должны быть stateless для горизонтального масштабирования",
            "implementation": "Состояние в БД/кэше, а не в памяти приложения",
            "violation_consequences": "Невозможность горизонтального масштабирования"
          },
          {
            "id": "SCALE-002",
            "name": "Microservices Boundaries",
            "priority": "MEDIUM",
            "description": "Сервисы должны быть разделены по доменным границам",
            "implementation": "Отдельные сервисы для каталога, заказов, пользователей, платежей",
            "violation_consequences": "Монолитная архитектура, сложность независимого развития"
          },
          {
            "id": "SCALE-003",
            "name": "Load Balancing",
            "priority": "HIGH",
            "description": "Трафик должен распределяться между инстансами",
            "implementation": "Application Load Balancer с health checks",
            "violation_consequences": "Single point of failure, неравномерное распределение нагрузки"
          }
        ]
      },
      "testing": {
        "description": "Правила тестирования",
        "rules": [
          {
            "id": "TEST-001",
            "name": "Test Pyramid",
            "priority": "HIGH",
            "description": "Должна соблюдаться пирамида тестирования: unit > integration > e2e",
            "implementation": "70% unit tests, 20% integration, 10% e2e",
            "violation_consequences": "Медленная обратная связь, высокие затраты на поддержку тестов"
          },
          {
            "id": "TEST-002",
            "name": "Test Coverage",
            "priority": "MEDIUM",
            "description": "Критичный код должен иметь покрытие тестами не менее 80%",
            "implementation": "Обязательное покрытие бизнес-логики, payment processing, security",
            "violation_consequences": "Регрессии в продакшене, низкая уверенность в изменениях"
          },
          {
            "id": "TEST-003",
            "name": "Contract Testing",
            "priority": "MEDIUM",
            "description": "Интерфейсы между сервисами должны покрываться контрактными тестами",
            "implementation": "Pact или схемы OpenAPI для тестирования совместимости API",
            "violation_consequences": "Поломки интеграций при изменениях API"
          }
        ]
      },
      "deployment": {
        "description": "Правила развертывания",
        "rules": [
          {
            "id": "DEPLOY-001",
            "name": "Infrastructure as Code",
            "priority": "HIGH",
            "description": "Инфраструктура должна описываться кодом и версионироваться",
            "implementation": "Terraform/CloudFormation для инфраструктуры, Ansible/Chef для конфигурации",
            "violation_consequences": "Несогласованность окружений, проблемы с восстановлением"
          },
          {
            "id": "DEPLOY-002",
            "name": "Blue-Green Deployment",
            "priority": "MEDIUM",
            "description": "Критичные сервисы должны развертываться без простоя",
            "implementation": "Параллельные окружения, переключение трафика после проверки",
            "violation_consequences": "Простои при обновлениях, потеря выручки"
          },
          {
            "id": "DEPLOY-003",
            "name": "Rollback Strategy",
            "priority": "HIGH",
            "description": "Должна быть возможность быстрого отката изменений",
            "implementation": "Версионирование артефактов, автоматический rollback при критичных ошибках",
            "violation_consequences": "Длительные простои при проблемных релизах"
          },
          {
            "id": "DEPLOY-004",
            "name": "Environment Parity",
            "priority": "HIGH",
            "description": "Все окружения должны быть максимально идентичными",
            "implementation": "Одинаковые версии ПО, конфигурации, данные схожей структуры",
            "violation_consequences": "\"Works on my machine\" проблемы, неожиданное поведение в продакшене"
          }
        ]
      }
    },
    "enforcement": {
      "automated_checks": [
        "Static code analysis (SonarQube, ESLint)",
        "Security scanning (OWASP ZAP, Snyk)",
        "Performance testing (k6, JMeter)",
        "Code coverage reports",
        "API contract validation"
      ],
      "code_review_checklist": [
        "Архитектурные правила соблюдены",
        "Безопасность проверена",
        "Производительность оценена",
        "Тестирование достаточное",
        "Документация обновлена"
      ],
      "metrics": {
        "code_quality": ["cyclomatic_complexity", "code_coverage", "technical_debt_ratio"],
        "security": ["vulnerability_count", "security_hotspots", "compliance_score"],
        "performance": ["response_time_p95", "throughput", "error_rate"],
        "reliability": ["uptime", "mttr", "change_failure_rate"]
      }
    }
  }
}